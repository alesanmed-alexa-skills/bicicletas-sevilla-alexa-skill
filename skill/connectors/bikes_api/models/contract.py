# coding: utf-8

"""
    JCDecaux API

    JCDecaux API for retrieving dynamic data about bike stations and contracts  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: alesanchezmedina@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Contract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cities': 'list[str]',
        'commercial_name': 'str',
        'country_code': 'str',
        'name': 'str'
    }

    attribute_map = {
        'cities': 'cities',
        'commercial_name': 'commercial_name',
        'country_code': 'country_code',
        'name': 'name'
    }

    def __init__(self, cities=None, commercial_name=None, country_code=None, name=None):  # noqa: E501
        """Contract - a model defined in Swagger"""  # noqa: E501

        self._cities = None
        self._commercial_name = None
        self._country_code = None
        self._name = None
        self.discriminator = None

        if cities is not None:
            self.cities = cities
        if commercial_name is not None:
            self.commercial_name = commercial_name
        if country_code is not None:
            self.country_code = country_code
        if name is not None:
            self.name = name

    @property
    def cities(self):
        """Gets the cities of this Contract.  # noqa: E501

        The cities that are concerned by this contract  # noqa: E501

        :return: The cities of this Contract.  # noqa: E501
        :rtype: list[str]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this Contract.

        The cities that are concerned by this contract  # noqa: E501

        :param cities: The cities of this Contract.  # noqa: E501
        :type: list[str]
        """

        self._cities = cities

    @property
    def commercial_name(self):
        """Gets the commercial_name of this Contract.  # noqa: E501

        The commercial name of the contract, the one users usually know  # noqa: E501

        :return: The commercial_name of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._commercial_name

    @commercial_name.setter
    def commercial_name(self, commercial_name):
        """Sets the commercial_name of this Contract.

        The commercial name of the contract, the one users usually know  # noqa: E501

        :param commercial_name: The commercial_name of this Contract.  # noqa: E501
        :type: str
        """

        self._commercial_name = commercial_name

    @property
    def country_code(self):
        """Gets the country_code of this Contract.  # noqa: E501

        The code (ISO 3166) of the country  # noqa: E501

        :return: The country_code of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Contract.

        The code (ISO 3166) of the country  # noqa: E501

        :param country_code: The country_code of this Contract.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def name(self):
        """Gets the name of this Contract.  # noqa: E501

        The identifier of the contract  # noqa: E501

        :return: The name of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contract.

        The identifier of the contract  # noqa: E501

        :param name: The name of this Contract.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
