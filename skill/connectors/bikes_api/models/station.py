# coding: utf-8

"""
    JCDecaux API

    JCDecaux API for retrieving dynamic data about bike stations and contracts  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: alesanchezmedina@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from .station_position import StationPosition  # noqa: F401,E501


class Station(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'available_bike_stands': 'float',
        'available_bikes': 'float',
        'banking': 'bool',
        'bike_stands': 'float',
        'bonus': 'bool',
        'contract_name': 'str',
        'last_update': 'float',
        'name': 'str',
        'number': 'float',
        'position': 'StationPosition',
        'status': 'str'
    }

    attribute_map = {
        'address': 'address',
        'available_bike_stands': 'available_bike_stands',
        'available_bikes': 'available_bikes',
        'banking': 'banking',
        'bike_stands': 'bike_stands',
        'bonus': 'bonus',
        'contract_name': 'contract_name',
        'last_update': 'last_update',
        'name': 'name',
        'number': 'number',
        'position': 'position',
        'status': 'status'
    }

    def __init__(self, address=None, available_bike_stands=None, available_bikes=None, banking=None, bike_stands=None, bonus=None, contract_name=None, last_update=None, name=None, number=None, position=None, status=None):  # noqa: E501
        """Station - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._available_bike_stands = None
        self._available_bikes = None
        self._banking = None
        self._bike_stands = None
        self._bonus = None
        self._contract_name = None
        self._last_update = None
        self._name = None
        self._number = None
        self._position = None
        self._status = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if available_bike_stands is not None:
            self.available_bike_stands = available_bike_stands
        if available_bikes is not None:
            self.available_bikes = available_bikes
        if banking is not None:
            self.banking = banking
        if bike_stands is not None:
            self.bike_stands = bike_stands
        if bonus is not None:
            self.bonus = bonus
        if contract_name is not None:
            self.contract_name = contract_name
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if position is not None:
            self.position = position
        if status is not None:
            self.status = status

    @property
    def address(self):
        """Gets the address of this Station.  # noqa: E501

        Address of the station. As it is raw data, sometimes it will be more of a comment than an address.  # noqa: E501

        :return: The address of this Station.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Station.

        Address of the station. As it is raw data, sometimes it will be more of a comment than an address.  # noqa: E501

        :param address: The address of this Station.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def available_bike_stands(self):
        """Gets the available_bike_stands of this Station.  # noqa: E501

        The number of available bike stands at this station  # noqa: E501

        :return: The available_bike_stands of this Station.  # noqa: E501
        :rtype: float
        """
        return self._available_bike_stands

    @available_bike_stands.setter
    def available_bike_stands(self, available_bike_stands):
        """Sets the available_bike_stands of this Station.

        The number of available bike stands at this station  # noqa: E501

        :param available_bike_stands: The available_bike_stands of this Station.  # noqa: E501
        :type: float
        """

        self._available_bike_stands = available_bike_stands

    @property
    def available_bikes(self):
        """Gets the available_bikes of this Station.  # noqa: E501

        The number of available and operational bikes at this station  # noqa: E501

        :return: The available_bikes of this Station.  # noqa: E501
        :rtype: float
        """
        return self._available_bikes

    @available_bikes.setter
    def available_bikes(self, available_bikes):
        """Sets the available_bikes of this Station.

        The number of available and operational bikes at this station  # noqa: E501

        :param available_bikes: The available_bikes of this Station.  # noqa: E501
        :type: float
        """

        self._available_bikes = available_bikes

    @property
    def banking(self):
        """Gets the banking of this Station.  # noqa: E501

        Indicates whether this station has a payment terminal  # noqa: E501

        :return: The banking of this Station.  # noqa: E501
        :rtype: bool
        """
        return self._banking

    @banking.setter
    def banking(self, banking):
        """Sets the banking of this Station.

        Indicates whether this station has a payment terminal  # noqa: E501

        :param banking: The banking of this Station.  # noqa: E501
        :type: bool
        """

        self._banking = banking

    @property
    def bike_stands(self):
        """Gets the bike_stands of this Station.  # noqa: E501

        The number of operational bike stands at this station  # noqa: E501

        :return: The bike_stands of this Station.  # noqa: E501
        :rtype: float
        """
        return self._bike_stands

    @bike_stands.setter
    def bike_stands(self, bike_stands):
        """Sets the bike_stands of this Station.

        The number of operational bike stands at this station  # noqa: E501

        :param bike_stands: The bike_stands of this Station.  # noqa: E501
        :type: float
        """

        self._bike_stands = bike_stands

    @property
    def bonus(self):
        """Gets the bonus of this Station.  # noqa: E501

        Indicates whether this is a bonus station  # noqa: E501

        :return: The bonus of this Station.  # noqa: E501
        :rtype: bool
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this Station.

        Indicates whether this is a bonus station  # noqa: E501

        :param bonus: The bonus of this Station.  # noqa: E501
        :type: bool
        """

        self._bonus = bonus

    @property
    def contract_name(self):
        """Gets the contract_name of this Station.  # noqa: E501

        Name of the contract of the station  # noqa: E501

        :return: The contract_name of this Station.  # noqa: E501
        :rtype: str
        """
        return self._contract_name

    @contract_name.setter
    def contract_name(self, contract_name):
        """Sets the contract_name of this Station.

        Name of the contract of the station  # noqa: E501

        :param contract_name: The contract_name of this Station.  # noqa: E501
        :type: str
        """

        self._contract_name = contract_name

    @property
    def last_update(self):
        """Gets the last_update of this Station.  # noqa: E501

        Timestamp indicating the last update time in milliseconds since Epoch  # noqa: E501

        :return: The last_update of this Station.  # noqa: E501
        :rtype: float
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Station.

        Timestamp indicating the last update time in milliseconds since Epoch  # noqa: E501

        :param last_update: The last_update of this Station.  # noqa: E501
        :type: float
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this Station.  # noqa: E501

        Name of the station  # noqa: E501

        :return: The name of this Station.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Station.

        Name of the station  # noqa: E501

        :param name: The name of this Station.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Station.  # noqa: E501

        Number of the station. This is NOT an id, thus it is unique only inside a contract.  # noqa: E501

        :return: The number of this Station.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Station.

        Number of the station. This is NOT an id, thus it is unique only inside a contract.  # noqa: E501

        :param number: The number of this Station.  # noqa: E501
        :type: float
        """

        self._number = number

    @property
    def position(self):
        """Gets the position of this Station.  # noqa: E501


        :return: The position of this Station.  # noqa: E501
        :rtype: StationPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Station.


        :param position: The position of this Station.  # noqa: E501
        :type: StationPosition
        """

        self._position = position

    @property
    def status(self):
        """Gets the status of this Station.  # noqa: E501

        Indicates whether this station is CLOSED or OPEN  # noqa: E501

        :return: The status of this Station.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Station.

        Indicates whether this station is CLOSED or OPEN  # noqa: E501

        :param status: The status of this Station.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Station):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
